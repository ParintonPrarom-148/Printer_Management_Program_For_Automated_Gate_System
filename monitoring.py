import sys
import os
import json
from dotenv import load_dotenv  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ dotenv
from PyQt6 import uic
from PyQt6.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QPushButton, QWidget, QToolButton, QMenu, QStackedWidget, QLabel, QMessageBox
from PyQt6.QtCore import QTimer
# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á `printerStatusFclTP.py`
printer_status_path = os.path.join(os.getcwd(), "python_printer_status")
sys.path.append(printer_status_path)
from printerStatusFclTP import printerStatus2  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ printerStatus2
from printerStatusVKP80iii import printerStatus1  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ printerStatus1

class Ui_Monitoring(QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi('Designer/monitoring.ui', self)  # ‡πÇ‡∏´‡∏•‡∏î UI
        self.init_ui()
        load_dotenv(override=True)
        work_dir = os.getcwd()
        self.primary_printer = printerStatus1(work_dir)
        self.secondary_printer = printerStatus2(work_dir)
        self.check_config_file()
    def check_config_file(self):
        printer_logfile_location = os.getenv("PRINTER_LOGFILE_LOCATION", "")
        config_file_path = os.path.join(printer_logfile_location, "config.json")
        print(f"‡πÑ‡∏ü‡∏•‡πå JSON path ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {config_file_path}")
        if not os.path.exists(config_file_path):
            self.show_warning()
            return
        else:
            print("‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json")
            self.current_printer = self.primary_printer
            self.is_using_secondary = False
            self.init_ui()
            self.json_data = self.load_json_data()
            self.current_selected_printer = "Primary"
            self.init_timer()
            #self.update_location_label()
            #self.show_primary_table()
             
            

    def show_warning(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Warning)
        msg.setWindowTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        msg.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Application Setup ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    # üõ† ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    def load_json_data(self):
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ KIOSK_LOCATION_LOGFILE
        printer_location_logfile = os.getenv('PRINTER_LOGFILE_LOCATION')  # ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô .env
        json_file_path = os.path.join(printer_location_logfile, 'config.JSON')  # ‡∏£‡∏ß‡∏° path
        try:
            with open(json_file_path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error loading JSON: {e}")
            return {}

    # üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    def init_ui(self):
        self.btnmenu = self.findChild(QToolButton, 'btnmenu')
        self.PaperJamStatus = self.findChild(QLabel, 'PaperJamStatus')
        self.OnlineStatus = self.findChild(QLabel, 'OnlineStatus')
        self.PrinterStatus = self.findChild(QLabel, 'PrinterStatus')
        self.PaperEndStatus = self.findChild(QLabel, 'PaperEndStatus')
        self.Location = self.findChild(QLabel, 'Location')
        self.PrinterModel = self.findChild(QLabel, 'PrinterModel')
        self.stackedWidget = self.findChild(QStackedWidget, 'stackedWidget')

        self.btnShowPrimaryTable = self.findChild(QPushButton, 'btnShowPrimaryTable')
        self.btnShowPrimaryTable.clicked.connect(self.show_primary_table)
        self.btnShowSecondaryTable = self.findChild(QPushButton, 'btnShowSecondaryTable')
        self.btnShowSecondaryTable.clicked.connect(self.show_secondary_table)

        self.btnLogFilePrimary = self.findChild(QPushButton, 'btnLogFilePrimary')
        self.btnLogFilePrimary.clicked.connect(self.go_to_logfile_primary)
        self.btnLogFileSecondary = self.findChild(QPushButton, 'btnLogFileSecondary')
        self.btnLogFileSecondary.clicked.connect(self.go_to_logfile_secondary)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π
        menu = QMenu(self)
        menu.addAction('Monitoring', self.on_monitoring_selected)
        menu.addAction('Configuration Setup', self.on_configuration_selected)
        menu.addAction('Application Setup', self.on_application_selected)
        self.btnmenu.setMenu(menu)
        self.btnmenu.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)

    # ‚è≥ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Timer
    def init_timer(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_status)
        self.timer.start(1000)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    # üåç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Location ‡∏à‡∏≤‡∏Å JSON
    def update_location_label(self):
        try:
            location = self.json_data.get('ApplicationSetup', [{}])[0].get('Location', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            self.Location.setText(location)
        except Exception as e:
            print(f"Error updating location: {e}")

    # üñ®Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    def update_printer_model_label(self, setting):
        model = self.get_printer_info(setting, 'PrinterModel')
        self.PrinterModel.setText(model if model else "Printer Model: Not Found")

    # üìã ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå
    def get_printer_info(self, setting, key):
        for setup_key in ['PrinterSetup1', 'PrinterSetup2']:
            for setup in self.json_data.get(setup_key, []):
                if setup.get('Setting') == setting:
                    return setup.get(key, '')
        return None
    def get_printer_and_paper_status(self, setting):
        for setup_key in ['PrinterSetup1', 'PrinterSetup2']:
            printer_setup = self.json_data.get(setup_key, [])
            for setup in printer_setup:
                if setup.get('Setting') == setting:
                    return setup.get('PrinterModel', '')
        return None

    # üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Printer & Paper
    def update_status(self):
        primary_status = self.primary_printer.get_status()
        secondary_status = self.secondary_printer.get_status()

        if primary_status["printerStatus"] == "unavailable":
            if not self.is_using_secondary:
                QMessageBox.warning(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á")
                self.current_printer = self.secondary_printer
                self.is_using_secondary = True
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å printer status
            status = self.current_printer.get_status()
            # ‡πÅ‡∏™‡∏î‡∏á Printer Status ‡πÅ‡∏•‡∏∞ Online Status ‡∏ó‡∏µ‡πà printer_status_label2
            printer_status_text2 = f"FTP-639PS {status['printerStatus']}\n"
            self.PrinterStatus.setText(printer_status_text2)
            online_status_text2 = f"FTP-639OS {status['onlineStatus']}\n"
            self.OnlineStatus.setText(online_status_text2)

            # ‡πÅ‡∏™‡∏î‡∏á Paper End Status ‡πÅ‡∏•‡∏∞ Paper Jam Status ‡∏ó‡∏µ‡πà paper_status_label2
            paper_end_status_text2 = f"FTP-639ES {status['paperEndStatus']}\n"
            self.PaperEndStatus.setText(paper_end_status_text2)
            paper_jam_status_text2 = f"FTP-639JS {status['paperJamStatus']}\n"
            self.PaperJamStatus.setText(paper_jam_status_text2)
        
        if primary_status["printerStatus"] == "unavailable" and secondary_status["printerStatus"] == "unavailable":
            QMessageBox.critical(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤...")
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å printer status
            status = self.current_printer.get_status()
            # ‡πÅ‡∏™‡∏î‡∏á Printer Status ‡πÅ‡∏•‡∏∞ Online Status ‡∏ó‡∏µ‡πà printer_status_label2
            printer_status_text2 = f"FTP-639PS {status['printerStatus']}\n"
            self.PrinterStatus.setText(printer_status_text2)
            online_status_text2 = f"FTP-639OS {status['onlineStatus']}\n"
            self.OnlineStatus.setText(online_status_text2)

            # ‡πÅ‡∏™‡∏î‡∏á Paper End Status ‡πÅ‡∏•‡∏∞ Paper Jam Status ‡∏ó‡∏µ‡πà paper_status_label2
            paper_end_status_text2 = f"FTP-639ES {status['paperEndStatus']}\n"
            self.PaperEndStatus.setText(paper_end_status_text2)
            paper_jam_status_text2 = f"FTP-639JS {status['paperJamStatus']}\n"
            self.PaperJamStatus.setText(paper_jam_status_text2)
        
        if self.is_using_secondary and primary_status["printerStatus"] == "available":
            QMessageBox.information(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å")
            self.current_printer = self.primary_printer
            self.is_using_secondary = False
        
           # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å printer status
            status = self.current_printer.get_status()
            # ‡πÅ‡∏™‡∏î‡∏á Printer Status ‡πÅ‡∏•‡∏∞ Online Status ‡∏ó‡∏µ‡πà printer_status_label2
            printer_status_text2 = f"FTP-639PS {status['printerStatus']}\n"
            self.PrinterStatus.setText(printer_status_text2)
            online_status_text2 = f"FTP-639OS {status['onlineStatus']}\n"
            self.OnlineStatus.setText(online_status_text2)

            # ‡πÅ‡∏™‡∏î‡∏á Paper End Status ‡πÅ‡∏•‡∏∞ Paper Jam Status ‡∏ó‡∏µ‡πà paper_status_label2
            paper_end_status_text2 = f"FTP-639ES {status['paperEndStatus']}\n"
            self.PaperEndStatus.setText(paper_end_status_text2)
            paper_jam_status_text2 = f"FTP-639JS {status['paperJamStatus']}\n"
            self.PaperJamStatus.setText(paper_jam_status_text2)

    def update_all_printer_status(self):
        """ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å """
        if self.current_selected_printer == "Primary":
            self.update_printer_and_paper_status("Primary")
        elif self.current_selected_printer == "Secondary":
            self.update_printer_and_paper_status("Secondary")


    # üìÇ ‡πÄ‡∏õ‡∏¥‡∏î LogFile
    def go_to_logfile(self, setting):
        self.close()
        location_file = self.get_printer_info(setting, 'LocationFilePrinter')
        if location_file:
            log_file = os.path.join(location_file, 'LogFile', 'PrinterLogJson20241004150823.JSON')
            from logfile import Ui_LogFile
            self.new_window = Ui_LogFile()
            self.new_window.load_logfile_data(log_file)
            self.new_window.show()

    def go_to_logfile_primary(self):
        self.go_to_logfile('Primary')

    def go_to_logfile_secondary(self):
        self.go_to_logfile('Secondary')

    # üñ•Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UI
    def on_monitoring_selected(self):
        self.hide()
        from monitoring import Ui_Monitoring
        self.new_window = Ui_Monitoring()
        self.new_window.show()

    def on_configuration_selected(self):
        self.hide()
        from configuration import Ui_Configuration
        self.new_window = Ui_Configuration()
        self.new_window.show()

    def on_application_selected(self):
        self.hide()
        from application import Ui_Application
        self.new_window = Ui_Application()
        self.new_window.show()

    def show_primary_table(self):
        self.current_selected_printer = "Primary"  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Primary
        self.load_table('Primary')
        self.update_printer_model_label('Primary')
        self.update_printer_and_paper_status('Primary')
        self.stackedWidget.setCurrentIndex(0)
        self.btnLogFilePrimary.show()
        self.btnLogFileSecondary.hide()

    def show_secondary_table(self):
        self.current_selected_printer = "Secondary"  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Secondary
        self.load_table('Secondary')
        self.update_printer_model_label('Secondary')
        self.update_printer_and_paper_status('Secondary')
        self.stackedWidget.setCurrentIndex(1)
        self.btnLogFilePrimary.hide()
        self.btnLogFileSecondary.show()


    # üìä ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å JSON
    def load_table(self, setting):
        location_file = self.get_printer_info(setting, 'LocationFilePrinter')
        if location_file:
            json_file_path = os.path.join(location_file, 'LogFile', 'PrinterLogJson20241004150823.JSON')
            try:
                with open(json_file_path, 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    printer_log = data.get('PrinterLog', [])
                    table = self.tableLogPrimary if setting == 'Primary' else self.tableLogSecondary
                    table.setRowCount(len(printer_log))

                    for row, entry in enumerate(printer_log):
                        for col, key in enumerate(['Time', 'DocumentID', 'DocumentStatus', 'PrinterStatus', 'PaperStatus', 'Error']):
                            table.setItem(row, col, QTableWidgetItem(entry.get(key, '')))
            except Exception as e:
                print(f"Error loading table: {e}")

    def closeEvent(self, event):
        """ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Thread ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° """
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Ui_Monitoring()
    window.show()
    sys.exit(app.exec())
