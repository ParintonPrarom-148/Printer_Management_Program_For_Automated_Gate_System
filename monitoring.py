import sys
import os
import json
from dotenv import load_dotenv  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ dotenv
from PyQt6 import uic
from PyQt6.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QPushButton, QWidget, QToolButton, QMenu, QStackedWidget, QLabel, QMessageBox
from PyQt6.QtCore import QTimer
from datetime import datetime
# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á `printerStatusFclTP.py`
printer_status_path = os.path.join(os.getcwd(), "python_printer_status")
sys.path.append(printer_status_path)
from printerStatusFclTP import printerStatus2  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ printerStatus2
from printerStatusVKP80iii import printerStatus1  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ printerStatus1

class Ui_Monitoring(QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi('Designer/monitoring.ui', self)  # ‡πÇ‡∏´‡∏•‡∏î UI
        load_dotenv(override=True)
        self.init_ui()
        self.check_config_file()
    def check_config_file(self):
        printer_logfile_location = os.getenv("PRINTER_LOGFILE_LOCATION", "")
        config_file_path = os.path.join(printer_logfile_location, "config.json")
        print(f"‡πÑ‡∏ü‡∏•‡πå JSON path ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {config_file_path}")

        if not os.path.exists(config_file_path):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Icon.Warning)
            msg.setWindowTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
            msg.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Application Setup ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
            msg.setStandardButtons(QMessageBox.StandardButton.Ok)
            msg.exec()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            return

        print("‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json")

        # ‡πÇ‡∏´‡∏•‡∏î JSON
        with open(config_file_path, "r", encoding="utf-8") as file:
            try:
                self.json_data = json.load(file)
            except json.JSONDecodeError:
                QMessageBox.warning(None, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏ü‡∏•‡πå config.json ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PrinterModel ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        printer_setup1 = self.json_data.get("PrinterSetup1", [{}])[0]
        printer_setup2 = self.json_data.get("PrinterSetup2", [{}])[0]

        if not printer_setup1.get("PrinterModel") or not printer_setup2.get("PrinterModel"):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Icon.Warning)
            msg.setWindowTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
            msg.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
            msg.setStandardButtons(QMessageBox.StandardButton.Ok)
            msg.exec()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            return

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        work_dir = os.getcwd()
        self.primary_printer = printerStatus1(work_dir)
        self.secondary_printer = printerStatus2(work_dir)
        
        self.current_printer = self.primary_printer
        self.is_using_secondary = False
        self.init_ui()
        self.current_selected_printer = "Primary"
        self.init_timer()
        self.update_location_label()

    def show_warning(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Warning)
        msg.setWindowTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        msg.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Application Setup ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    # üõ† ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    def load_json_data(self):
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ KIOSK_LOCATION_LOGFILE
        printer_location_logfile = os.getenv('PRINTER_LOGFILE_LOCATION')  # ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô .env
        json_file_path = os.path.join(printer_location_logfile, 'config.JSON')  # ‡∏£‡∏ß‡∏° path
        try:
            with open(json_file_path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error loading JSON: {e}")
            return {}

    # üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    def init_ui(self):
        self.btnmenu = self.findChild(QToolButton, 'btnmenu')
        self.PaperJamStatus = self.findChild(QLabel, 'PaperJamStatus')
        self.OnlineStatus = self.findChild(QLabel, 'OnlineStatus')
        self.PrinterStatus = self.findChild(QLabel, 'PrinterStatus')
        self.PaperEndStatus = self.findChild(QLabel, 'PaperEndStatus')
        self.Location = self.findChild(QLabel, 'Location')
        self.PrinterModel = self.findChild(QLabel, 'PrinterModel')
        self.stackedWidget = self.findChild(QStackedWidget, 'stackedWidget')

        self.btnShowPrimaryTable = self.findChild(QPushButton, 'btnShowPrimaryTable')
        self.btnShowPrimaryTable.clicked.connect(self.show_primary_table)
        self.btnShowSecondaryTable = self.findChild(QPushButton, 'btnShowSecondaryTable')
        self.btnShowSecondaryTable.clicked.connect(self.show_secondary_table)

        self.btnLogFilePrimary = self.findChild(QPushButton, 'btnLogFilePrimary')
        self.btnLogFilePrimary.clicked.connect(self.go_to_logfile_primary)
        self.btnLogFileSecondary = self.findChild(QPushButton, 'btnLogFileSecondary')
        self.btnLogFileSecondary.clicked.connect(self.go_to_logfile_secondary)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π
        menu = QMenu(self)
        menu.addAction('Monitoring', self.on_monitoring_selected)
        menu.addAction('Configuration Setup', self.on_configuration_selected)
        menu.addAction('Application Setup', self.on_application_selected)
        self.btnmenu.setMenu(menu)
        self.btnmenu.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)

    # ‚è≥ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Timer
    def init_timer(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_status)
        self.timer.start(1000)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    # üåç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Location ‡∏à‡∏≤‡∏Å JSON
    def update_location_label(self):
        try:
            location = self.json_data.get('ApplicationSetup', [{}])[0].get('Location', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            self.Location.setText(location)
        except Exception as e:
            print(f"Error updating location: {e}")

    # üñ®Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    def update_printer_model_label(self, setting):
        model = self.get_printer_info(setting, 'PrinterModel')
        self.PrinterModel.setText(model if model else "Printer Model: Not Found")

    # üìã ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå
    def get_printer_info(self, setting, key):
        for setup_key in ['PrinterSetup1', 'PrinterSetup2']:
            for setup in self.json_data.get(setup_key, []):
                if setup.get('Setting') == setting:
                    return setup.get(key, '')
        return None
    def get_printer_and_paper_status(self, setting):
        for setup_key in ['PrinterSetup1', 'PrinterSetup2']:
            printer_setup = self.json_data.get(setup_key, [])
            for setup in printer_setup:
                if setup.get('Setting') == setting:
                    return setup.get('PrinterModel', '')
        return None

   # üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Printer & Paper
    def update_status(self):
        primary_status = self.primary_printer.get_status()
        secondary_status = self.secondary_printer.get_status()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        if primary_status["printerStatus"] == "unavailable" and secondary_status["printerStatus"] == "unavailable":
            self.lb_information.setText("‚õî ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤...")
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if secondary_status["printerStatus"] == "available" and self.is_using_secondary:
                self.lb_information.setText("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á")

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á
        if primary_status["printerStatus"] == "unavailable" and not self.is_using_secondary:
            self.lb_information.setText("‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á")
            self.current_printer = self.secondary_printer
            self.is_using_secondary = True
            self.load_table('Secondary')

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
        if self.is_using_secondary and primary_status["printerStatus"] == "available":
            self.lb_information.setText("‚úÖ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å")
            self.current_printer = self.primary_printer
            self.is_using_secondary = False
            self.load_table('Primary')

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å printer status
        status = self.current_printer.get_status()

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QLabel ‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.PrinterStatus.setText(f"{status['printerStatus']}\n")
        self.OnlineStatus.setText(f"{status['onlineStatus']}\n")
        self.PaperEndStatus.setText(f"{status['paperEndStatus']}\n")
        self.PaperJamStatus.setText(f"{status['paperJamStatus']}\n")

    # üìÇ ‡πÄ‡∏õ‡∏¥‡∏î LogFile
    def go_to_logfile(self, setting):
        self.close()
        location_file = self.get_printer_info(setting, 'LocationFilePrinter')
        if location_file:
            current_time_folder = datetime.now().strftime("%Y%m%d")
            current_time_file = datetime.now().strftime("%Y%m%d%H")
            json_file_name = f"PrinterStatusJson{current_time_file}.JSON"
            json_file_path = os.path.join(location_file, 'Status', current_time_folder, json_file_name)
            from logfile import Ui_LogFile
            self.new_window = Ui_LogFile()
            self.new_window.load_logfile_data(json_file_path)
            self.new_window.show()

    def go_to_logfile_primary(self):
        self.go_to_logfile('Primary')

    def go_to_logfile_secondary(self):
        self.go_to_logfile('Secondary')

    # üñ•Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UI
    def on_monitoring_selected(self):
        self.hide()
        from monitoring import Ui_Monitoring
        self.new_window = Ui_Monitoring()
        self.new_window.show()

    def on_configuration_selected(self):
        self.hide()
        from configuration import Ui_Configuration
        self.new_window = Ui_Configuration()
        self.new_window.show()

    def on_application_selected(self):
        self.hide()
        from application import Ui_Application
        self.new_window = Ui_Application()
        self.new_window.show()

    def show_primary_table(self):
        self.current_selected_printer = "Primary"  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Primary
        self.load_table('Primary')
        self.update_printer_model_label('Primary')

        self.stackedWidget.setCurrentIndex(0)
        self.btnLogFilePrimary.show()
        self.btnLogFileSecondary.hide()

    def show_secondary_table(self):
        self.current_selected_printer = "Secondary"  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Secondary
        self.load_table('Secondary')
        self.update_printer_model_label('Secondary')

        self.stackedWidget.setCurrentIndex(1)
        self.btnLogFilePrimary.hide()
        self.btnLogFileSecondary.show()

    # üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô QTableWidget
    def load_table(self, setting):
        location_file = self.get_printer_info(setting, 'LocationFilePrinter')
        if location_file:
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMMDDHH
            current_time_folder = datetime.now().strftime("%Y%m%d")
            current_time_file = datetime.now().strftime("%Y%m%d%H")
            json_file_name = f"PrinterStatusJson{current_time_file}.JSON"
            json_file_path = os.path.join(location_file, 'Status', current_time_folder, json_file_name)

            try:
                with open(json_file_path, 'r', encoding='utf-8') as file:
                    data = json.load(file)

                    if not isinstance(data, list):
                        return
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
                    try:
                        data.sort(key=lambda x: datetime.strptime(x.get("timestamp", "1970-01-01 00:00:00.000"), "%Y-%m-%d %H:%M:%S.%f"), reverse=True)
                    except ValueError:
                        return

                    # ‡πÉ‡∏ä‡πâ table ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö setting ('Primary' ‡∏´‡∏£‡∏∑‡∏≠ 'Secondary')
                    table = self.tableLogPrimary if setting == 'Primary' else self.tableLogSecondary

                    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
                    columns = ['timestamp', 'senderIp', 'printerId', 'printerStatus', 'onlineStatus', 'paperEndStatus', 'paperJamStatus']

                    table.setRowCount(len(data))
                    table.setColumnCount(len(columns))
                    table.setHorizontalHeaderLabels(columns)

                    for row, entry in enumerate(data):
                        for col, key in enumerate(columns):
                            value = entry.get(key, 'N/A')
                            table.setItem(row, col, QTableWidgetItem(str(value)))

                    table.resizeColumnsToContents()  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

            except FileNotFoundError:
                print(f"Error: The file at {json_file_path} was not found.")
            except json.JSONDecodeError:
                print("Error: The file could not be decoded as JSON.")
            except Exception as e:
                print(f"An error occurred: {e}")


    def closeEvent(self, event):
        """ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Thread ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° """
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Ui_Monitoring()
    window.show()
    sys.exit(app.exec())
